{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/home/bud/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
			"settings":
			{
				"buffer_size": 939,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSnippet Destroyer\n-----------------\n\n  # sublime-snippet-destroyer\n  \n  Destroy all [Sublime Text][] completions and snippets.\n  \n  [Sublime Text]: http://sublimetext.com/\n  \n  Have you ever been humming along, using `Tab` to fill out previously used variables, then *bam* you autocomplete to a snippet? Your flow is broken and frustrated at no easy way to remove the default snippets.\n  \n  Well, suffer no more! `sublime-snippet-destroyer` seeks and destroys all completions and snippets.\n  \n  > `sublime-snippet-destroyer` does not aim to allow for restoration of snippets. If we started doing that, then we should make a full-fledged snippet manager.\n  \n  ## Sublime Text 3 setup\n  Currently, Sublime Text 2 will work out of the box. However, for Sublime Text 3 we must extract all its packages first. This can be done via the \"Extract Sublime Package: Extract all packages\" command in the \"ExtractSublimePackage\" module.\n  \n  https://github.com/SublimeText/ExtractSublimePackage\n  \n  ## Usage\n  `sublime-snippet-destroyer` provides a new command to the command pallete **\"Destroy all snippets!!\"**\n  \n  If you are using Sublime Text 3, then please see [Sublime Text 3 setup](#sublime-text-3-setup) first.\n  \n  When this is ran, it finds all `.sublime-snippet` + `.sublime-completions` + `.tmSnippet` files in your [Sublime Text][] Packages directory.\n  \n  If no snippets are found, you will be informed as such.\n  \n  If snippets are found, you will be prompted to confirm in their deletion. If you approve, they will be removed from disk.\n  \n  There is currently one section we cannot erase which is any plugin with a `on_query_completions` method (e.g. `CSS` and `HTML`). These are baked in to `EventListener` commands and cannot be scrubbed easily. As a result, you must delete these files manually.\n  \n  ## Donating\n  Support this project and [others by twolfson][gittip] via [gittip][].\n  \n  [gittip]: https://www.gittip.com/twolfson/\n  \n  ## Unlicense\n  As of Nov 20 2013, Todd Wolfson has released this repository and its contents to the public domain.\n  \n  It has been released under the [UNLICENSE][].\n  \n  [UNLICENSE]: ../UNLICENSE\n\n\nA File Icon\n-----------\n\n  ```\n  \n      $$$$$$\\        $$$$$$$$\\ $$\\ $$\\                 $$$$$$\\                              \n     $$  __$$\\       $$  _____|\\__|$$ |                \\_$$  _|                             \n     $$ /  $$ |      $$ |      $$\\ $$ | $$$$$$\\          $$ |  $$$$$$$\\  $$$$$$\\  $$$$$$$\\  \n     $$$$$$$$ |      $$$$$\\    $$ |$$ |$$  __$$\\         $$ | $$  _____|$$  __$$\\ $$  __$$\\ \n     $$  __$$ |      $$  __|   $$ |$$ |$$$$$$$$ |        $$ | $$ /      $$ /  $$ |$$ |  $$ |\n     $$ |  $$ |      $$ |      $$ |$$ |$$   ____|        $$ | $$ |      $$ |  $$ |$$ |  $$ |\n     $$ |  $$ |      $$ |      $$ |$$ |\\$$$$$$$\\       $$$$$$\\\\$$$$$$$\\ \\$$$$$$  |$$ |  $$ |\n     \\__|  \\__|      \\__|      \\__|\\__| \\_______|      \\______|\\_______| \\______/ \\__|  \\__|\n  \n  ```\n  \n  This package adds file specific icons to Sublime Text for improved visual grepping. \n  It's heavily inspired by Atom File Icons.\n  \n  ***\n  \n  1. Please restart Sublime Text for the applied icons to take effect.\n  2. The icons for packages provided by the community must be installed,\n     i.e., if you want to see SCSS icons you should install one of the SCSS syntax packages.\n  \n  ***\n  \n  I've put a lot of time and effort into making `A File Icon` awesome. If you love \n  it, you can [buy me a coffee](https://www.patreon.com/ihodev) â˜•.\n\n\nMarkdownEditing\n---------------\n\n  # MarkdownEditing\n  \n  Markdown plugin for Sublime Text. Provides a decent Markdown color scheme (light and dark) with more __robust__ syntax highlighting and useful Markdown editing features for Sublime Text. 3 flavors are supported: Standard Markdown, __GitHub flavored Markdown__, MultiMarkdown.\n  \n  ![MarkdownEditing][LightTheme]\n  \n  [Dark][DarkTheme] and [Yellow][YellowTheme] and [ArcDark][ArcDarkTheme] theme available, plus [thirdparty themes](#additional-color-themes). See [configuration](#configuration) section to learn **how to change the theme**.\n  \n  ## Overview\n  \n  <!-- MarkdownTOC autolink=\"true\" bracket=\"round\" markdown_preview=\"markdown\" -->\n  \n  - [Installation](#installation)\n      - [Package Control](#package-control)\n      - [Manual Installation](#manual-installation)\n  - [Features](#features)\n      - [Markdown features](#markdown-features)\n      - [Wiki features](#wiki-features)\n  - [Key Bindings](#key-bindings)\n  - [GFM Specific Features](#gfm-specific-features)\n  - [Commands for Command Palette](#commands-for-command-palette)\n      - [General Commands](#general-commands)\n      - [Links, References and Footnotes](#links-references-and-footnotes)\n      - [Folding and Navigation](#folding-and-navigation)\n  - [Configuration](#configuration)\n      - [Additional color themes:](#additional-color-themes)\n  - [Tips](#tips)\n  - [Enable WYSIWYG](#enable-wysiwyg)\n  - [Troubleshooting](#troubleshooting)\n      - [Error loading syntax file...](#error-loading-syntax-file)\n      - [Roll back to an older version](#roll-back-to-an-older-version)\n  - [Related Plugins](#related-plugins)\n  - [Known Bugs](#known-bugs)\n  - [Contributing](#contributing)\n  - [Credits](#credits)\n  - [Donation](#donation)\n  - [License](#license)\n  \n  <!-- /MarkdownTOC -->\n  \n  ## Installation\n  \n  You can install MarkdownEditing either from Package Control (recommended) or manually. Package Control automatically download the package and keeps it up-to-date. Manual installation is required if you need to tweak the code.\n  \n  If you are using Sublime Text 2, you have to disable the native package _manually_. To do that, add `Markdown` to your `ignored_packages` list in ST user settings:\n  \n      \"ignored_packages\": [..., \"Markdown\"],\n  \n  > Getting \"Error loading syntax file...\"? See [this](#error-loading-syntax-file).\n  \n  ### Package Control\n  \n  The preferred method of installation is via [Sublime Package Control][PackageControl].\n  \n  1. [Install Sublime Package Control][InstallPackageControl]\n  2. From inside Sublime Text, open Package Control's Command Pallet: <kbd>CTRL</kbd> <kbd>SHIFT</kbd> <kbd>P</kbd> (Windows, Linux) or <kbd>CMD</kbd> <kbd>SHIFT</kbd> <kbd>P</kbd> on Mac.\n  3. Type `install package` and hit Return. A list of available packages will be displayed.\n  4. Type `MarkdownEditing` and hit Return. The package will be downloaded to the appropriate directory.\n  5. Restart Sublime Text to complete installation. Open a Markdown file and this custom theme. The features listed below should now be available.\n  \n  ### Manual Installation\n  \n  1. In Sublime Text, open the menu \"Preferences\" -> \"Browse Packages...\". This is the Sublime Text Packages directory.\n  2. [Download and unzip](https://github.com/SublimeText-Markdown/MarkdownEditing/archive/master.zip) or [clone](https://help.github.com/articles/cloning-a-repository/) this repository to a directory `MarkdownEditing` in the Sublime Text Packages directory.\n  3. The folder structure should look like `.../Sublime Text 3/Packages/MarkdownEditing/[files]`.\n  4. Restart Sublime Text to complete installation. Open a Markdown file. The features listed below should now be available.\n  \n  ## Features\n  \n  You can access most features through Command Palette. You can launch it from `Tools -> Command Palette...`. MarkdownEditing commands start with `MarkdownEditing:`. And they are only visible when a markdown file is open and active.\n  \n  ### Markdown features\n  \n  * __Pairing__\n      - Asterisks and underscores are autopaired and will wrap selected text.\n      - If you start an empty pair and hit backspace, both elements are deleted.\n      - If you start an empty pair and hit space, the right element is deleted.\n      - Backticks are paired. So entering `` ` `` will expand to `` `(cursor here)` ``.\n  * __List__\n      - At the end of a list item, pressing <kbd>Enter</kbd> will automatically insert the new list item bullet.\n      - Pressing <kbd>Tab</kbd> on the blank list item will indent it and switch the list bullet to another one (Order is `*`, `-`, `+` in a cycle).\n      - Pressing <kbd>Shift</kbd> <kbd>Tab</kbd> on the blank list item will unindent it in the same way as above.\n      - Sequential <kbd>Tab</kbd> s or <kbd>Shift</kbd> <kbd>Tab</kbd> s are supported.\n      - You can disable automatic bullet switching or choose which bullets to be used, in your settings file (`mde.list_indent_bullets`).\n      - If a list item contains a [GFM task][], pressing <kbd>Enter</kbd> at the end of the line will continue with a new blank task.\n  * __Blockquote__\n      - At the end of a blockquote line, pressing <kbd>Enter</kbd> will automatically extend blockquote.\n      - Selecting some text and pressing <kbd>&gt;</kbd> will convert it to blockquote. The first and the last line don't have to be fully selected; partial select works, too.\n  * __Link__\n      - Left bracket pairing is modified to eliminate the selection and leave the cursor at a point where you can insert a `[]` or `()` pair for a link.\n      - If you leave the cursor on a link, you can right click and jump between reference and url.\n  * __Navigation__\n      - Displays Markdown headers in the Project Symbol List (`Goto -> Goto Symbol in Project...`). They will start with `#`, so you will know they belong to markdown files at a glance. Also they will be on top of the list because of the precedence of `#`.\n      - Headers also appear in Document Symbol List (`Goto -> Goto Symbol...`)\n      - You can fold current section with <kbd>Ctrl</kbd> <kbd>Tab</kbd>\n      - You can navigate between adjacent headers with `Find Next(Previous) Heading` command.\n  * __Strikethrough__\n      - <kbd>~</kbd> wraps selected text with `~~` (strikethrough). When you for instance select the word \"foo\" and hit  `~`, the result will be `~~foo~~`.\n  * __Header__\n      - Typing `#` when there's a selection will surround it with `#` to make it a headline. Multiple presses add additional hashes, increasing the level of the header. Once you hit 6 hashes, it will reset to 0 on the next press. The `mde.match_header_hashes` will determine if the `#` are mirrored on both sides or just at the beginning of the line.\n      - Typing return at the end of a line that begins with hashmarks will insert closing hashmarks on the headline. They're not required for Markdown, it's just aesthetics, and you can change the `mde.match_header_hashes` option in your settings to enable (disabled by default).\n      - Setext-style headers can be completed with `Tab`. That is, typing `Tab` on a line containing only `=` or `-` characters will add or remove enough characters to it to match the length of the line above.\n      - New documents will be named automatically based on the first header.\n  \n  ### Wiki features\n  \n  Wiki links are defined by surrounding a (wiki) word with double square brackets, for example:\n  \n      [[SampleWikiPage]]\n  \n  The user can `open` wiki page using a sublime command.  This will search the current open file's directory (and sub-directories) for a file with a matching name and a markdown extension.  For example, opening the previous wiki link\n  will look for and open a file named:\n  \n      SampleWikiPage.md\n  \n  Note that, if the wiki page does *not* yet exist, if will be created with a header matching the page name.  However the file will only actually be created on the file system, when it is saved by the user.  \n  \n  The user can `list back links` and of course to open them.  Back links are pages that reference the current page.  This allows pages to be tied together into a personal wiki.   A common technique is to define *tag* wiki pages and to list any tags for a page as references to the tag pages at the bottom of the page, for example:\n      \n      [[TagSyntax]] [[TagDev]] [[TagPython]]\n  \n  This allows the user to list all pages with a specific tag, by opening the tag page and list all back links.\n  \n  Journal wiki pages are also supported.  A journal page is just a wiki page with a name matching the current date.\n  \n  Lastly the command to open the *home* page is provided, where the home page is just a wiki page named `HomePage`.\n  \n  ## Key Bindings\n  \n  | OS X | Windows/Linux | Description |\n  |------|---------------|-------------|\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>V</kbd> | <kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>V</kbd> | Creates or pastes the contents of the clipboard as an inline link on selected text.\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>R</kbd> | <kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>R</kbd> | Creates or pastes the contents of the clipboard as a reference link.\n  | <kbd>âŒ˜</kbd><kbd>â‡§</kbd><kbd>K</kbd> | <kbd>Shift</kbd><kbd>Win</kbd><kbd>K</kbd> | Creates or pastes the contents of the clipboard as an inline image on selected text.\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>B</kbd> <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>I</kbd> | <kbd>Alt</kbd><kbd>B</kbd> <kbd>Alt</kbd><kbd>I</kbd> | These are bound to bold and italic. They work both with and without selections. If there is no selection, they will just transform the word under the cursor. These keybindings will unbold/unitalicize selection if it is already bold/italic.\n  | <kbd>âŒ˜</kbd><kbd>^</kbd><kbd>1...6</kbd> | <kbd>Ctrl</kbd><kbd>1...6</kbd> | These will add the corresponding number of hashmarks for headlines. Works on blank lines and selected text in tandem with the above headline tools. If you select an entire existing headline, the current hashmarks will be removed and replaced with the header level you requested. This command respects the `mde.match_header_hashes` preference setting.\n  | <kbd>âŒ¥</kbd><kbd>â‡§</kbd><kbd>6</kbd> | <kbd>Alt</kbd><kbd>Shift</kbd><kbd>6</kbd> | Inserts a footnote.\n  | <kbd>â‡§</kbd><kbd>Tab</kbd> | <kbd>Shift</kbd><kbd>Tab</kbd> | Fold/Unfold current section.\n  | <kbd>^</kbd><kbd>â‡§</kbd><kbd>Tab</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Tab</kbd> | Fold all sections under headings of a certain level.\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>PageUp</kbd> <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>PageDown</kbd> | <kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>Shift</kbd><kbd>PageUp</kbd> <kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>Shift</kbd><kbd>PageDown</kbd> | Go to the previous/next heading of the same or higher level\n  | <kbd>âŒ˜</kbd><kbd>â‡§</kbd><kbd>PageUp</kbd> <kbd>âŒ˜</kbd><kbd>â‡§</kbd><kbd>PageDown</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>PageUp</kbd> <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>PageDown</kbd> |  Go to the previous/next heading\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>H</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>H</kbd> | Open home page\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>D</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>D</kbd> | Open wiki page under the cursor\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>J</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>J</kbd> | Open journal page for today\n  | <kbd>âŒ˜</kbd><kbd>âŒ¥</kbd><kbd>B</kbd> | <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>B</kbd> | List back links\n  \n  \n  ## GFM Specific Features\n  \n  [GFM][] means GitHub Flavored Markdown is the dialect of Markdown that is currently supported for user content on GitHub.com and GitHub Enterprise. It has [some unique features][GFMFeatures]:\n  \n  Underscores in words doesn't mess with bold or italic style:\n  \n  ![underscore-in-words][GFM-UnderscoreInWords]\n  \n  Fenced code blocks gets syntax highlighting inside:\n  \n  ![fenced-code-block][GFM-FencedCodeBlock]\n  \n  Keyboard shortcuts gets highlighted like in GitHub:\n  \n  ![keyboard-shortcut][GFM-KeyboardShortcut]\n  \n  Strikethrough is supported:\n  \n  ![strikethrough][GFM-Strikethrough]\n  \n  ## Commands for Command Palette\n  \n  You can launch Command Palette from `Tools -> Command Palette...`. MarkdownEditing commands start with `MarkdownEditing:`. And they are only visible when a markdown file is open and active.\n  \n  ### General Commands\n  \n  * __Fix Underlined Headers__\n      Adjusts every setext-style header to add or remove `=` or `-` characters as needed to match the lengths of their header text.\n  * __Convert Underlined Headers to ATX__\n      Converts every setext-style header into an ATX style header. If something is selected only the headers in the selections will be converted, otherwise the conversion will be applied to the whole view.\n  * __Markdown Lint__\n      Performs lint on current Markdown file using a local linter. See [lint rules](lint_docs/RULES.md). Some of the linting rules are customizable via user settings file.\n  * __Run markdownlint__\n      Run mdl command from [markdownlint](https://github.com/markdownlint/markdownlint) package. You need to install it by yourself.\n  * __Change color scheme...__\n      Lists built-in Markdown color schemes for you to preview and use.\n  * __Switch List Bullet Type__\n      Switches the highlighted list between numbered and bulleted style.\n  \n  ### Links, References and Footnotes\n  \n  * __Add Missing Link Labels__\n      Scans document for referenced link usages (`[some link][some_ref]` and `[some link][]`) and checks if they are all defined. If there are undefined link references, command will automatically create their definition snippet at the bottom of the file.\n  * __Magic Footnotes Command__\n      Adds a footnote after the word under cursor. If cursor is already on a footnote, jumps to its definition or reference.\n  * __Gather Missing Footnotes__\n      Add definition stubs (if there is none) for all footnotes references.\n  * __Jump Reference__\n      Jumps cursor between definitions and references.\n  * __New Reference__\n      Adds a new link under cursor.\n  * __New Inline Link__\n      Adds a new inline link under cursor.\n  * __New Inline Image__\n      Adds a new inline image under cursor.\n  * __New Image__\n      Adds a new image under cursor.\n  * __New Footnote__\n      Adds a footnote under cursor.\n  * __Delete Reference__\n      Deletes the definition and references of a link.\n  * __Organize References__\n      Sorts and gives a report on current link references usage.\n  \n  ### Folding and Navigation\n  \n  Remeber you can <kbd>Ctrl</kbd> <kbd>R</kbd> (in document) and <kbd>Ctrl</kbd> <kbd>Shift</kbd> <kbd>R</kbd> (project-wise) for quick navigation for all headers.\n  \n  * __Toggle Folding Current Section__\n      Folds/unfolds current section.\n  * __Fold Level 1-4 Sections__\n      Fold all sections under headers of specific level.\n  * __Fold/Unfold All Sections__\n      Self explanatory.\n  * __Find Next/Previous Heading__\n      You have option to find just same or higher level or any level\n  \n  ## Configuration\n  \n  The plugin contains 3 different Markdown flavors: Standard Markdown, GitHub flavored Markdown, MultiMarkdown. Default is GitHub flavored Markdown. If you want to set another one as default, open a Markdown file and select your flavor from the menu: `View > Syntax > Open all with current extension as`. You're done.\n  \n  You may want to have a look at the default settings files. They are located at:\n  \n      Packages/MarkdownEditing/Markdown.sublime-settings         [GitHub flavored Markdown]\n      Packages/MarkdownEditing/Markdown (Standard).sublime-settings\n      Packages/MarkdownEditing/MultiMarkdown.sublime-settings\n  \n  If you want to override any of the default settings, you can open the appropriate user settings file using the `Preferences > Package Settings > Markdown Editing` menu. Each flavor has a different settings file.\n  \n  Bold and italic markers are configurable through ST shell variables. You can use `Preferences > Package Settings > Markdown Editing` menu to see the default settings file. In order to override it, copy & paste its content into the user settings file (`Packages/User/Bold and Italic Markers.tmPreferences`) from the menu and make your edits. It is pretty straightforward.\n  \n  In order to activate the dark or the yellow theme, put one of these lines to your user settings file of the flavor (`Packages/User/[flavor].sublime-settings`):\n  \n      \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme\",\n      \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-Yellow.tmTheme\",\n      \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-ArcDark.tmTheme\",\n      \n  \n  If you want to go with your already existing theme, you can reenable it with the same method as above. Keep in mind that, that theme may not cover all the parts of the Markdown syntax that this plugin defines.\n  \n  ### Additional color themes:\n  \n  - [Blackboard theme][linkBlackboardTheme] by [@mdesantis][mdesantis]\n  - [monokaiC](https://github.com/avivace/monokaiC) by [@avivace][avivace]\n  \n  By default, when you install the plugin, files with these extensions will be assigned to Markdown syntax: \"md\", \"txt\", \"mdown\", \"markdown\", \"markdn\". If you want to prevent any of these extensions to be opened as Markdown, follow these steps:\n  \n  1. Click on the language menu at bottom right\n  2. Select \"Open all with current extension as\"\n  3. Choose your preferred syntax for that extension\n  \n  ## Tips\n  \n  We are maintaining a [tips section][tips] in our [Wiki][]. Jump there to learn from others or share your experiences with others.\n  \n  ## Enable WYSIWYG\n  \n  Sublime can be configured into a WYSIWYG (what you see is what you get) editor with two other plugins:\n  \n  1. Markdown Preview (https://packagecontrol.io/packages/Markdown%20Preview)\n  1. Livereload (https://packagecontrol.io/packages/LiveReload)\n  \n  Install them if you haven't. Then\n  \n  1. Open Palette\n  1. LiveReload: Enable/Disable Plugins\n  1. Enable Simple Reload.\n  \n  Now open palette and choose \"Preview in Browser\" and you will get a WYSIWYG editor.\n  \n  ## Troubleshooting\n  \n  ### Error loading syntax file...\n  \n  __Are you getting this error after installation: _**Error loading syntax file** \"Packages/Markdown/Markdown.tmLanguage\": Unable to open Packages/Markdown/Markdown.tmLanguage_?__\n  \n  >  This is caused by open markdown files at the install time. You have to __manually change their syntax to your newly installed Markdown syntax__. Read the below paragraph for more details on this.\n  \n  _Note_: Sublime text has a native tiny package for Markdown. However, when MarkdownEditing is enabled, native package causes some conflicts. For this reason, MarkdownEditing will automatically disable it. Since it doesn't bring anything new over MarkdownEditing, this is not a loss. But remember, when you disable MarkdownEditing, you have to reenable the native one manually (if you want).\n  \n  ### Roll back to an older version\n  \n  When you notice any undesired behavior introduced by the latest update, your feedback is always welcome in our [issue page](https://github.com/SublimeText-Markdown/MarkdownEditing/issues). However before it's fixed, you can rollback to [an earlier version](https://github.com/SublimeText-Markdown/MarkdownEditing/releases). Find the desired version and download the zip file, then follow [manual installation guide](#manual-installation)\n  \n  ## Related Plugins\n  \n  * [Knockdown][]\n  \n       Knockdown offers useful Markdown features and a custom Markdown theme. All of its unique features except its theme are ported to MarkdownEditing and some of them are actually improved further in MarkdownEditing.\n  * [Sublime Markdown Extended][]\n  * [SmartMarkdown][]\n  * [MarkdownTOC][]\n      - Sublime Text 3 plugin for generating a Table of Contents (TOC) in a Markdown document.\n  * See https://packagecontrol.io/search/markdown for more.\n  \n  ## Known Bugs\n  \n  * Setext-style headers (`===` and `---`) do not show up in the symbol list. This is due to a Sublime Text limitation (see [#158][]). However, we are able to put a placeholder to indicate the existence of the header. We encourage you to use Atx-style headers (`#`).\n  \n  * Installing for the first time while having markdown files opened may cause MarkdownEditing to behave unexpectedly on those files. Close and reopen those files to fix it.\n  \n  ## Contributing\n  \n  See `CONTRIBUTING.md` file.\n  \n  ## Credits\n  \n  MarkdownEditing was originally created by [Brett Terpstra][brettterpstra] and has become a community project with the goal of consolidating the best features from the varied collection of Markdown packages for Sublime Text. Current development is headed up by [Ali Ayas][maliayas] and [Felix Hao][felixhao28].\n  \n  Related blog posts from Brett:\n  * http://brettterpstra.com/2012/05/17/markdown-editing-for-sublime-text-2-humble-beginnings/\n  * http://brettterpstra.com/2013/11/23/markdownediting-for-sublime-text-updates/\n  \n  This plugin contains portions of code from [Knockdown][].\n  \n  Footnote commands were submitted by [J. Nicholas Geist][] and originated at [geekabouttown][geekabouttown].\n  \n  ## Donation\n  \n  You can support [contributors](https://github.com/SublimeText-Markdown/MarkdownEditing/graphs/contributors) of this project individually. Every contributor is welcomed to add his/her line below with any content. Ordering shall be alphabetically by GitHub username.\n  \n  * [@felixhao28][felixhao28]: <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=9QV2RFV2J8UZS\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" alt=\"[paypal]\" /></a>\n  * [@maliayas][maliayas]: <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=W2NXRPD43YSCU&amp;lc=TR&amp;item_name=open-source&amp;item_number=markdown-editing&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" alt=\"[paypal]\" /></a> ![donation received](http://maliayas.com/business/donation/badge.php?project=markdown_editing)\n  \n  ## License\n  \n  MarkdownEditing is released under the [MIT License][opensource].\n  \n  [LightTheme]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/light.png\n  [DarkTheme]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/dark.png\n  [YellowTheme]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/yellow.png\n  [ArcDarkTheme]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/arcdark.png\n  [PackageControl]: http://wbond.net/sublime_packages/package_control\n  [InstallPackageControl]: http://wbond.net/sublime_packages/package_control/installation\n  [GFM task]: https://github.github.com/gfm/#task-list-items-extension-\n  [GFM]: https://github.github.com/gfm/\n  [GFMFeatures]: https://guides.github.com/features/mastering-markdown/\n  [GFM-UnderscoreInWords]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/underscore-in-words.png\n  [GFM-FencedCodeBlock]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/fenced-code-block.png\n  [GFM-KeyboardShortcut]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/keyboard-shortcut.png\n  [GFM-Strikethrough]: https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/strikethrough.png\n  [linkBlackboardTheme]: https://github.com/mdesantis/MarkdownEditing/blob/blackboard-theme/MarkdownEditor-Blackboard.tmTheme\n  [mdesantis]: https://github.com/mdesantis\n  [avivace]: https://github.com/avivace\n  [tips]: https://github.com/SublimeText-Markdown/MarkdownEditing/wiki/Tips\n  [Wiki]: https://github.com/SublimeText-Markdown/MarkdownEditing/wiki\n  [Knockdown]: https://github.com/aziz/knockdown/\n  [Sublime Markdown Extended]: https://github.com/jonschlinkert/sublime-markdown-extended\n  [SmartMarkdown]: https://github.com/demon386/SmartMarkdown\n  [MarkdownTOC]: https://github.com/naokazuterada/MarkdownTOC\n  [#158]: https://github.com/SublimeText-Markdown/MarkdownEditing/issues/158\n  [brettterpstra]: http://brettterpstra.com\n  [maliayas]: https://github.com/maliayas\n  [felixhao28]: https://github.com/felixhao28\n  [J. Nicholas Geist]: https://github.com/jngeist\n  [geekabouttown]: http://geekabouttown.com/posts/sublime-text-2-markdown-footnote-goodness\n  [opensource]: http://www.opensource.org/licenses/MIT\n\n\nGolang Tools Integration\n------------------------\n\n  # Golang Tools Integration\n  \n  It's a fork version of [GoTools](https://github.com/ironcladlou/GoTools) by ironcladlou. I create this project because ironcladlou has decided to abandon GoTools project, and I want to use this plugin together with [Golang Build](https://github.com/golang/sublime-build) (by wbond) ([discuss-1](\n  https://github.com/ironcladlou/GoTools/issues/121); [discuss-2](https://github.com/ironcladlou/GoTools/issues/128)).\n  \n  ### Features inherited from GoTools:\n  - Auto-Completion: with gocode\n  - Auto-Format: with gofmt or goimports\n  - Go-to Definition: with guru\n  - Rename: with gorename\n  \n  ### Features removed(replaced) from GoTools:\n  - Go syntax highlight: replaced by sublime's native support\n  - Go build & test system: replaced by \"[Golang Build](https://github.com/golang/sublime-build)\" (search in package-control)\n  - GoTools Settings: replaced by \"[golangconfig](https://github.com/golang/sublime-config)\"\n  - godef support: only use guru for \"Go to definition\"\n  \n  ### Features added:\n  - Auto-Lint: with golint or govet\n  - Doc tips over selected text or cursor: with godoc\n  \n  ### Usage\n  - **Step 1**: Install golang and go tools by yourself: gocode, goimports, guru, gorename, golint, and make sure the `$GOPATH/bin` is added into `$PATH` (Or you can set them in Golang's global \"Settings - User\" later).\n  \n      ```bash\n      go get -u -v github.com/nsf/gocode\n      # OR mdempsky/gocode for better performance\n      go get -u -v github.com/mdempsky/gocode\n      \n      go get -u -v github.com/golang/lint/golint\n      go get -u -v golang.org/x/tools/cmd/guru\n      go get -u -v golang.org/x/tools/cmd/goimports\n      go get -u -v golang.org/x/tools/cmd/gorename\n      ```\n      \n  - **Step 2**: Search and install \"Golang Tools Integration\" from package control.\n  - **Step 3(optional)**: Configure the Settings for `golang` and your project following the `golang.sublime-settings` and `ExampleProject.sublime-project`. Typically, the full features of 'guru' need use the configuration of the project.\n  \n  ### Tips\n  - If you want to trigger auto-completion after \".\", you can add below into Settings - Syntax specific - User (a.k.a. User/Go.sublime-settings):\n  \n      ```json\n      {\n          \"auto_complete_triggers\": [{\"selector\": \"source.go - string - comment - constant.numeric\", \"characters\": \".\"}]\n      }\n      ```\n  \n  - If you want to ignore auto-completion when in comments, constant strings, and numbers, you can add below into Settings - Syntax specific - User (a.k.a. User/Go.sublime-settings):\n  \n      ```json\n      {\n          \"auto_complete_selector\": \"meta.tag - punctuation.definition.tag.begin, source - comment - string - constant.numeric\"\n      }\n      ```\n  \n  ------------------\n  \n  **Introduction below comes from GoTools project**\n  \n  # GoTools\n  \n  GoTools is a [Go programming language](http://www.golang.org) plugin for [Sublime Text 3](http://www.sublimetext.com) inspired by [vim-go](https://github.com/fatih/vim-go). Rather than attempting to reinvent various supporting IDE components, it provides integration with existing community-supported tools.\n  \n  ## Features\n  \n  * Jump to symbol/declaration using [guru](https://godoc.org/golang.org/x/tools/cmd/guru)\n  * Format and syntax check on save, including gutter marks (using [gofmt](https://golang.org/cmd/gofmt/))\n  * Autocompletion (using [gocode](https://github.com/nsf/gocode))\n  * Build and test integration\n  * Source analysis (using [guru](https://godoc.org/golang.org/x/tools/cmd/guru))\n  * Identifier renaming (using [gorename](https://godoc.org/golang.org/x/tools/cmd/gorename))\n  * Improved syntax support (borrowed from [GoSublime](https://github.com/DisposaBoy/GoSublime))\n  \n  ### Prerequisites\n  \n  GoTools will attempt to find all external Go tools (`guru`, `gofmt`, `gocode`, etc.) using `GOPATH` and `GOROOT` (not `PATH`). If you don't have these binaries, use `go get` to install them:\n  \n      go get -u -v github.com/nsf/gocode\n      go get -u -v golang.org/x/tools/cmd/goimports\n      go get -u -v golang.org/x/tools/cmd/guru\n      go get -u -v golang.org/x/tools/cmd/gorename\n  \n  GoTools is only tested with Go 1.4. Note that `gofmt` is now included with the Go distribution, and any `gofmt` installed to `GOPATH` is likely from an old Go version and should probably be removed.\n  \n  ### Installing\n  \n  The easiest way to install GoTools is to use [Package Control](https://packagecontrol.io). Simply install Package Control, and then install the \"GoTools\" package using `Package Control: Install Package` from the command palette.\n  \n  If you want to install GoTools manually, download [the latest release](https://github.com/ironcladlou/GoTools/releases) and extract it to `~/.config/sublime-text-3/Packages/GoTools` on Linux, or `~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/GoTools` on OSX.\n  \n  ### Configuring GoTools\n  \n  Create a GoTools settings file through the Sublime Text preferences menu at `Package Settings -> GoTools -> Settings -> User`.\n  \n  [Default settings](GoTools.sublime-settings) are provided and can be accessed through the Sublime Text preferences menu at `Package Settings -> GoTools -> Settings - Default`. Each option is documented in the settings file itself.\n  \n  ### Configuring Your Project\n  \n  Create a `GoTools` settings key in a Sublime Text `.sublime-project` file (through the menu at `Project -> Edit Project`).\n  \n  A documented [example project file](ExampleProject.sublime-project) is provided.\n  \n  ## Using GoTools\n  \n  **NOTE:** Most GoTools commands are available via the Sublime Text command palette. Open the palette when viewing a Go source file and search for \"GoTools\" to see what's available.\n  \n  Many of the build commands are also available via the context menu.\n  \n  #### Format on Save\n  \n  GoTools will format Go source buffers each time they're saved. To disable automatic formatting, set `format_on_save` in your [GoTools settings](GoTools.sublime-settings).\n  \n  Here's an example key binding which formats a source file when `<ctrl>+<alt>+f` is pressed:\n  \n  ```json\n  {\"keys\": [\"ctrl+alt+f\"], \"command\": \"gotools_format\"}\n  ```\n  \n  By default [gofmt](https://golang.org/cmd/gofmt/) is used for formatting. To change the backend, set `format_backend` in your [GoTools settings](GoTools.sublime-settings). [goimports](https://godoc.org/golang.org/x/tools/cmd/goimports) is also available, as well as the option to first run goimports, then gofmt. This third option is useful when you want the automatic import resolution as well as the simplification (`-s`) feature from gofmt at the same time.\n  \n  #### Go to Definition\n  \n  GoTools provides a `gotools_goto_def` Sublime Text command which will jump to the symbol definition at the cursor.\n  \n  Here's an example key binding which will go to a definition when `<ctrl+g>` is pressed:\n  \n  ```json\n  {\"keys\": [\"ctrl+g\"], \"command\": \"gotools_goto_def\"}\n  ```\n  \n  Here's an example `sublime-mousemap` entry which will go to a definition using `<ctrl>+<left mouse>`:\n  \n  ```json\n  {\"button\": \"button1\", \"count\": 1, \"modifiers\": [\"ctrl\"], \"command\": \"gotools_goto_def\"}\n  ```\n  \n  #### Autocomplete\n  \n  GoTools integrates the Sublime Text autocompletion engine with [gocode](https://github.com/nsf/gocode).\n  \n  Here's an example key binding which autocompletes when `<ctrl>+<space>` is pressed:\n  \n  ```json\n  {\"keys\": [\"ctrl+space\"], \"command\": \"auto_complete\"}\n  ```\n  \n  When suggestions are available, a specially formatted suggestion list will appear, including type information for each suggestion.\n  \n  To disable autocompletion integration, set `autocomplete` in your [GoTools settings](GoTools.sublime-settings).\n  \n  #### Builds\n  \n  GoTools integrates the Sublime Text build system with `go build`.\n  \n  Activate the GoTools build system from the Sublime Text menu by selecting it from `Tools -> Build System`. If the build system is set to `Automatic`, GoTools will be automatically used for builds when editing Go source files.\n  \n  There are several ways to perform a build:\n  \n    * From the Sublime Text menu at `Tools -> Build`\n    * A key bound to the `build` command\n    * The command palette, as `Build: Build`\n  \n  A \"Clean Build\" command variant is also provided which recursively deletes all `GOPATH/pkg` directory contents prior to executing the build as usual.\n  \n  Build results are placed in the Sublime Text build output panel which can be toggled with a command such as:\n  \n  ```json\n  { \"keys\" : [\"ctrl+m\"], \"command\" : \"show_panel\" , \"args\" : {\"panel\": \"output.exec\", \"toggle\": true}},\n  ```\n  \n  Here's an example key binding which runs a build when `<ctrl>+b` is pressed:\n  \n  ```json\n  { \"keys\": [\"ctrl+b\"], \"command\": \"build\" },\n  ```\n  \n  Here's an example key binding which runs \"Clean Build\" when `<ctrl>+<alt>+b` is pressed:\n  \n  ```json\n  { \"keys\": [\"ctrl+alt+b\"], \"command\": \"build\", \"args\": {\"variant\": \"Clean Build\"}},\n  ```\n  \n  #### Tests\n  \n  GoTools integrates the Sublime Text build system with `go test`.\n  \n  GoTools attempts to \"do what you mean\" depending on context. For instance, when using \"Run Test at Cursor\" in a test file which requires an `integration` Go build tag, GoTools will notice this and automatically add `-tags integration` to the test execution.\n  \n  The following GoTools build variants are available:\n  \n  Variant                   | Description\n  --------------------------|-------------\n  Run Tests                 | Discovers test packages based on the `project_package` and `test_packages` settings relative to the project `gopath` and executes them.\n  Run Test at Cursor        | Runs a single test method at or surrounding the cursor.\n  Run Current Package Tests | Runs tests for the package containing the current file.\n  Run Tagged Tests          | Like \"Run Tests\" but for the packages specified in the `tagged_packages` setting.\n  Run Last Test             | Runs the last test variant that was executed.\n  \n  Test results are placed in the built-in Sublime Text build output panel which can be toggled with a command such as:\n  \n  ```json\n  { \"keys\" : [\"ctrl+m\"], \"command\" : \"show_panel\" , \"args\" : {\"panel\": \"output.exec\", \"toggle\": true}},\n  ```\n  \n  Here's an example key binding which runs the test at the cursor when `<ctrl>+<alt>+t` is pressed:\n  \n  ```json\n  { \"keys\": [\"ctrl+alt+t\"], \"command\": \"build\", \"args\": {\"variant\": \"Run Test at Cursor\"}},\n  ```\n  \n  Replace `variant` in the command with any variant name from the preceding table for other bindings.\n  \n  #### Oracle Analysis (experimental)\n  \n  GoTools integrates Sublime Text with [guru](https://godoc.org/golang.org/x/tools/cmd/guru). Oracle is invoked with the `gotools_guru` Sublime Text command.\n  \n  Here's an example which runs the guru \"implements\" command when `<ctrl+alt+i>` is pressed:\n  \n  ```json\n  { \"keys\" : [\"ctrl+alt+i\"], \"command\" : \"gotools_guru\" , \"args\" : {\"command\": \"implements\"}},\n  ```\n  \n  The following guru operations are supported as arguments to the `gotools_guru` command:\n  \n  Command      | Notes\n  -------------|------\n  callers      | Slow on large codebases.\n  callees      | Slow on large codebases.\n  callstack    | Slow on large codebases.\n  describe     |\n  freevars     | Requires a selection.\n  implements   |\n  peers        |\n  referrers    |\n  \n  Oracle results are placed in a Sublime Text output panel which can be toggled with a command such as:\n  \n  ```json\n  { \"keys\" : [\"ctrl+m\"], \"command\" : \"show_panel\" , \"args\" : {\"panel\": \"output.gotools_guru\", \"toggle\": true}},\n  ```\n  \n  #### Rename (experimental)\n  \n  GoTools provides a `gotools_rename` command supported by [gorename](https://godoc.org/golang.org/x/tools/cmd/gorename) which supports type-safe renaming of identifiers.\n  \n  When the `gotools_rename` command is executed, an input panel labeled `Go rename:` will appear. Rename results are placed in a Sublime Text output panel which can be toggled with a command such as:\n  \n  ```json\n  { \"keys\" : [\"ctrl+m\"], \"command\" : \"show_panel\" , \"args\" : {\"panel\": \"output.gotools_rename\", \"toggle\": true}},\n  ```\n  \n  **Important**: The `gorename` tool writes files in-place with no option for a dry-run. Changes might be destructive, and the tool is known to have bugs.\n  \n  \n  ### Gocode Caveats\n  \n  **Important**: Using gocode support will modify the `lib-path` setting in the gocode daemon. The change will affect all clients, including other Sublime Text sessions, Vim instances, etc. Don't use this setting if you're concerned about interoperability with other tools which integrate with gocode.\n  \n  Some projects make use of a dependency isolation tool such as [Godep](https://github.com/tools/godep), and many projects use some sort of custom build script. Additionally, gocode uses a client/server architecture, and at present relies on a global server-side setting to resolve Go package paths for suggestion computation. By default, gocode will only search `GOROOT` and `GOPATH/pkg` for packages, which may be insufficient if the project compiles source to multiple `GOPATH` entries (such as `Godeps/_workspace/pkg`).\n  \n  With such a project, to get the best suggestions from gocode, it's necessary to configure the gocode daemon prior to client suggestion requests to inform gocode about the locations of compiled packages for the project.\n  \n  GoTools will infer the correct gocode `lib-path` by constructing a path which incorporates all project `GOPATH` entries.\n  \n  ### GoSublime Caveats\n  \n  Installing GoTools alongside GoSublime isn't tested or supported, so YMMV.\n\n\nSublimeLinter\n-------------\n\n  \n    ____        _     _ _                _     _       _\n   / ___| _   _| |__ | (_)_ __ ___   ___| |   (_)_ __ | |_ ___ _ __\n   \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   | | '_ \\| __/ _ \\ '__|\n    ___) | |_| | |_) | | | | | | | |  __/ |___| | | | | ||  __/ |\n   |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|_____|_|_| |_|\\__\\___|_|\n  \n  \n  Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n  Linters are not included, they must be installed separately.\n  \n  \n  For complete documentation on how to use and configure SublimeLinter,\n  please see: http://www.sublimelinter.com\n  \n  To report issues: https://github.com/SublimeLinter/SublimeLinter\n\n\nTable Editor\n------------\n\n  # Table Editor\n  \n  ## Overview\n  \n  *Table Editor* is a package for the *Sublime Text 2* and *Sublime Text 3* \n  editor for edit text tables. \n  *Table Editor* is has almost the same keys as Emacs-org mode table editor. \n  \n  *Table Editor* allow on easy way edit text table, it allows:\n  \n  - navigate with tab/shift tab \n  - insert/delete row\n  - insert/delete column\n  - auto align number cells to right, text cells to left, header cells to center\n  - move column left/right\n  - move row up/down\n  - split long cell\n  - join two rows into one\n  - convert selected CSV region into table\n  - direct support subset of wiki table syntax\n      - Simple\n      - EmacsOrgMode\n      - Pandoc(Grid Tables, Pipe Tables)\n      - Multi Markdown(support colspan in alpha status)\n      - reStructuredText\n      - Textile(support colspan and rowspan in alpha status)\n  - auto detect table syntax by view syntax\n  - switch between different table syntax on the fly\n  - temporary disable/enable table editor for current view\n  - customize table syntax with settings\n  - support CJK : Chinese, Japanese, Korean(alpha status)\n  - show demo film in scratch view\n  \n  \n  For more information see\n  \n  * Sublime Text - Select Preferences->Package Settings->Table Editor->README\n  * Online - https://github.com/vkocubinsky/SublimeTableEditor\n\n\nSublimeLinter-shellcheck\n------------------------\n\n  SublimeLinter-shellcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to shellcheck.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-shellcheck\n  \n  Follow install instructions of shellcheck at https://github.com/koalaman/shellcheck\n  There is no Windows installer.\n",
			"settings":
			{
				"buffer_size": 44121,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Advanced Install Package"
			],
			[
				"ui",
				"UI: Select Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/bud/.config/sublime-text-3/Packages",
		"/home/bud/.config/sublime-text-3/Installed Packages"
	],
	"file_history":
	[
		"/home/bud/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/bud/git/lab/budlime/packages/User/Preferences.sublime-settings",
		"/home/bud/git/lab/budlime/install/Preferences.sublime-settings",
		"/home/bud/git/lab/budlime/install/install.sh",
		"/home/bud/git/lab/budlime/scripts/install.sh",
		"/home/bud/git/lab/budlime/packages/User/Projects/install.sublime-project"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/bud/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 939,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"SL.14.region_keys":
							[
							],
							"apply_syntax_touched": true,
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"syntax_mgr_loaded": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44121,
						"regions":
						{
						},
						"selection":
						[
							[
								44121,
								44121
							]
						],
						"settings":
						{
							"SL.23.region_keys":
							[
							],
							"apply_syntax_touched": true,
							"auto_indent": false,
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"syntax_mgr_loaded": true,
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "install.sublime-project",
	"replace":
	{
		"height": 80.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
